package com.ruilonglai.texas_scan.util;

import com.ruilonglai.texas_scan.R;
import com.ruilonglai.texas_scan.ScanTool;


/**
 * Created by wgl on 2017/4/26.
 */

public class CardUtil {
    //cards[0]9人桌card[1]8人桌，7,6,5,4,3,card[7]2人桌
    final static String[][] cards =  {
            {"AA","KK","QQ","KAs","QAs","JJ","QKs","JAs","TAs","JKs","KA","JQs","TKs",
            "TT","TQs","TJs","QA","9As","QK","8As","5As","9Ks","JA","9Ts","7As","99",
            "4As","9Js","9Qs","3As","JK","2As","TA","JQ","6As","8Ks","8Ts","88","TK",
            "TJ","7Ks","TQ","8Js","89s","8Qs","5Ks","6Ks","78s","77","4Ks","7Ts","79s",
            "7Qs","3Ks","7Js","9A","2Ks","5Qs","9T","6Qs","66","4Qs","8A","45s","67s",
            "68s","57s","9K","9J","5A","55","3Qs","9Q","56s","6Ts","69s","5Js","7A","2Qs",
            "6Js","4A","58s","44","4Js","3A","35s","5Ts","33","3Js","59s","8T","22","2A",
            "4Ts","47s","2Js","46s","89","6A","34s","8K","3Ts","8J","2Ts","48s","8Q","7K",
            "25s","49s","78","24s","39s","37s","36s","79","7T","29s","5K","6K","38s","23s",
            "7J","4K","28s","7Q","3K","27s","45","26s","67","57","68","2K","5Q","6Q","56",
            "4Q","69","6T","58","5J","3Q","35","6J","2Q","4J","5T","59","47","46","3J","34",
            "4T","2J","3T","48","25","2T","49","24","36","37","39","29","23","38","28","27","26"}
            ,
            {"AA","KK","QQ","KAs","JJ","QAs","QKs","JAs","KA","TAs","JKs","TT","JQs","TKs",
            "TQs","TJs","QA","9As","QK","JA","8As","99","5As","9Ks","7As","9Ts","4As",
            "9Qs","JK","9Js","TA","3As","JQ","2As","6As","TK","8Ks","88","TJ","TQ","8Ts",
            "7Ks","8Qs","8Js","89s","5Ks","6Ks","77","78s","4Ks","9A","7Ts","79s","7Qs",
            "7Js","3Ks","2Ks","9T","8A","5Qs","9K","6Qs","5A","9J","66","9Q","4Qs","7A",
            "68s","67s","4A","45s","3Qs","57s","6Ts","55","5Js","69s","56s","6Js","2Qs",
            "3A","4Js","58s","2A","44","8T","5Ts","6A","3Js","8K","59s","35s","89","4Ts",
            "2Js","8J","33","8Q","47s","46s","7K","22","3Ts","34s","2Ts","48s","78","49s",
            "25s","5K","6K","79","7T","39s","37s","36s","24s","7Q","4K","7J","29s","38s",
            "3K","23s","28s","5Q","2K","6Q","67","27s","68","45","26s","57","4Q","56","69",
            "6T","5J","3Q","6J","58","2Q","4J","35","5T","59","3J","47","46","4T","2J","34",
            "3T","48","2T","25","49","36","37","24","39","29","38","23","28","27","26"}
            ,
            {"AA","KK","QQ","JJ","KAs","QAs","QKs","JAs","TT","KA","TAs","JKs","JQs",
            "TKs","QA","TQs","TJs","QK","9As","99","JA","8As","9Ks","5As","JK","7As",
            "TA","9Ts","9Qs","4As","JQ","9Js","3As","88","TK","6As","2As","TQ","8Ks",
            "TJ","8Ts","7Ks","8Qs","8Js","89s","77","9A","6Ks","5Ks","4Ks","78s","7Qs",
            "7Ts","8A","79s","7Js","9K","3Ks","9T","2Ks","9J","9Q","5A","6Qs","5Qs",
            "7A","66","4Qs","4A","68s","67s","3Qs","3A","6Ts","55","5Js","69s","6Js",
            "57s","6A","45s","2Qs","8K","56s","2A","8T","4Js","58s","8J","89","8Q",
            "5Ts","7K","3Js","44","59s","4Ts","2Js","35s","47s","46s","3Ts","33","6K",
            "5K","78","2Ts","48s","34s","7T","79","22","49s","7Q","4K","7J","39s",
            "25s","37s","36s","3K","29s","24s","6Q","5Q","38s","2K","28s","67","68",
            "23s","4Q","57","6T","69","27s","45","26s","5J","56","3Q","6J","58","2Q",
            "4J","5T","59","3J","35","4T","46","47","2J","3T","34","48","2T","49",
            "25","39","36","37","24","29","38","28","23","27","26"}
            ,
            {"AA","KK","QQ","JJ","KAs","QAs","TT","QKs","JAs","KA","TAs","JKs","JQs",
            "TKs","QA","99","TQs","TJs","QK","JA","9As","8As","JK","TA","9Ks","7As",
            "5As","88","JQ","9Qs","9Ts","9Js","4As","TK","3As","TQ","6As","TJ","8Ks",
            "2As","7Ks","8Qs","8Ts","77","8Js","9A","89s","6Ks","5Ks","8A","9K","4Ks",
            "7Qs","7Ts","9T","78s","9Q","7Js","79s","7A","9J","5A","3Ks","66","6Qs",
            "2Ks","5Qs","4A","4Qs","3A","6A","8K","55","68s","67s","3Qs","6Ts","6Js",
            "5Js","69s","2A","8T","8Q","8J","7K","2Qs","89","57s","4Js","56s","45s",
            "58s","5Ts","3Js","44","59s","6K","4Ts","2Js","5K","78","3Ts","47s","46s",
            "7T","7Q","35s","79","4K","7J","33","2Ts","48s","49s","34s","3K","6Q","39s",
            "22","5Q","2K","36s","37s","29s","25s","4Q","67","68","38s","24s","6T","69",
            "28s","6J","5J","3Q","57","56","23s","45","27s","2Q","26s","4J","58","5T",
            "59","3J","4T","2J","46","47","35","3T","48","2T","34","49","39","36","25",
            "37","29","38","24","28","23","27","26"}
            ,
            {"AA","KK","QQ","JJ","TT","KAs","QAs","JAs","QKs","KA","99","TAs","JKs",
            "QA","JQs","TKs","TQs","QK","JA","TJs","9As","88","8As","TA","JK","9Ks",
            "7As","JQ","5As","TK","9Qs","9Js","9Ts","4As","TQ","6As","77","TJ","3As",
            "8Ks","9A","2As","7Ks","8Qs","8Ts","8Js","8A","89s","6Ks","9K","5Ks","7A",
            "66","9Q","5A","7Qs","9T","4Ks","9J","7Ts","7Js","78s","79s","3Ks","4A",
            "6Qs","5Qs","6A","2Ks","8K","3A","55","4Qs","8Q","7K","2A","8T","8J","6Js",
            "3Qs","6Ts","68s","67s","5Js","89","69s","2Qs","6K","4Js","57s","56s","44",
            "5K","58s","5Ts","3Js","45s","59s","7Q","4Ts","7T","78","4K","2Js","7J",
            "79","3Ts","6Q","47s","3K","46s","33","5Q","35s","2Ts","48s","49s","2K",
            "39s","4Q","34s","67","68","6T","6J","29s","22","69","36s","37s","5J","3Q",
            "25s","38s","57","28s","2Q","4J","56","24s","58","45","5T","59","3J","27s",
            "26s","23s","4T","2J","46","47","3T","35","48","2T","49","34","39","36",
            "37","29","25","38","28","24","27","26","23"}
            ,
            {"AA","KK","QQ","JJ","TT","KAs","99","QAs","JAs","KA","QKs","TAs","JKs",
            "QA","88","TKs","JQs","JA","QK","9As","TQs","TA","TJs","8As","JK","77",
            "9Ks","7As","JQ","5As","TK","9Qs","4As","6As","9Js","TQ","9A","9Ts","8Ks",
            "3As","TJ","8A","7Ks","2As","66","8Qs","9K","8Js","7A","8Ts","6Ks","5A",
            "89s","5Ks","9Q","9J","7Qs","4Ks","9T","4A","6A","55","7Js","8K","3Ks",
            "7Ts","6Qs","3A","79s","78s","5Qs","7K","2Ks","8Q","2A","4Qs","8J","8T",
            "6K","6Js","89","3Qs","6Ts","5Js","44","68s","67s","5K","69s","2Qs","4Js",
            "7Q","4K","57s","7J","3Js","5Ts","56s","7T","58s","78","59s","79","6Q",
            "3K","4Ts","2Js","45s","5Q","33","2K","3Ts","4Q","47s","46s","2Ts","48s",
            "49s","6J","6T","35s","68","67","3Q","5J","69","39s","22","34s","29s","2Q",
            "4J","36s","37s","57","38s","56","5T","58","25s","3J","28s","59","45","4T",
            "24s","2J","27s","26s","3T","23s","46","47","48","2T","49","35","39","34",
            "29","36","37","38","25","28","24","27","26","23"}
            ,
            {"AA","KK","QQ","JJ","TT","99","KAs","QAs","88","JAs","KA","TAs","QKs",
            "QA","JKs","77","JA","TKs","9As","TA","JQs","QK","8As","TQs","JK","7As",
            "9Ks","TJs","5As","TK","66","9A","6As","JQ","4As","9Qs","8A","8Ks","TQ",
            "3As","9Js","7A","7Ks","2As","9K","TJ","9Ts","55","5A","8Qs","6Ks","6A",
            "5Ks","4A","8Js","9Q","8K","8Ts","4Ks","3A","7Qs","9J","89s","7K","3Ks",
            "6Qs","9T","2A","7Js","8Q","44","5Qs","2Ks","6K","7Ts","79s","4Qs","5K",
            "8J","78s","8T","3Qs","6Js","4K","7Q","5Js","89","6Ts","2Qs","3K","6Q",
            "69s","4Js","7J","33","68s","67s","5Q","7T","3Js","2K","5Ts","79","78",
            "4Q","59s","2Js","4Ts","57s","58s","56s","6J","3Q","3Ts","5J","45s","6T",
            "22","2Ts","2Q","69","49s","4J","47s","68","46s","48s","67","39s","3J",
            "35s","5T","29s","59","57","4T","58","2J","56","37s","34s","36s","38s",
            "28s","3T","45","25s","2T","49","47","24s","46","27s","48","26s","39",
            "23s","35","29","34","36","37","38","28","25","24","27","26","23"}
            ,
            {"AA","KK","QQ","JJ","TT","99","88","KAs","QAs","77","JAs","KA","TAs","QA",
            "JA","QKs","9As","TA","JKs","66","8As","TKs","7As","QK","9A","5As",
            "JK","JQs","6As","9Ks","8A","TK","TQs","4As","55","7A","3As","8Ks",
            "5A","JQ","6A","2As","7Ks","9K","9Qs","TJs","TQ","4A","6Ks","3A","5Ks",
            "8Qs","8K","44","9Js","9Q","7K","2A","TJ","4Ks","7Qs","3Ks","6K","9Ts",
            "8Js","6Qs","8Q","5K","2Ks","9J","5Qs","8Ts","4K","7Js","33","4Qs","7Q",
            "9T","3K","8J","3Qs","89s","6Q","7Ts","6Js","2K","5Q","5Js","2Qs","8T",
            "7J","79s","4Js","4Q","6Ts","22","3Js","78s","3Q","89","7T","6J","69s",
            "5Ts","2Js","5J","2Q","4Ts","68s","79","4J","6T","59s","3Ts","67s","78",
            "3J","58s","2Ts","69","5T","2J","57s","49s","4T","56s","68","39s","48s",
            "59","3T","67","29s","47s","45s","58","46s","2T","38s","57","49","28s",
            "37s","56","35s","39","36s","48","29","34s","47","45","46","27s","25s",
            "26s","38","24s","28","37","35","36","23s","34","27","25","26","24","23"}
    };
    final static double[][] winP =  {
            {34.52,28.91,24.6,21.28,19.62,21.25,18.95,18.37,17.39,17.77,17.81,17.32,16.87,
            18.66,16.5,16.43,15.93,15.33,15.4,14.61,14.14,14.81,14.5,14.69,14.02,16.84,
            13.94,14.47,14.48,13.81,14.06,13.69,13.38,13.75,13.4,13.39,13.33,15.49,13.03,
            12.89,12.86,12.8,13.07,13.31,13.06,12.14,12.35,12.63,14.44,11.95,12.06,12.34,
            11.82,11.82,11.79,11.12,11.72,11.16,11.08,11.33,13.49,11,10.31,11.53,11.47,
            11.49,11.31,10.75,10.72,9.77,12.91,10.88,10.58,11.35,10.78,11.11,10.41,9.66,
            10.79,10.58,9.55,10.69,12.65,10.26,9.39,10.77,9.87,12.49,10.16,10.14,9.59,
            12.46,9.27,9.7,10.33,10.07,10.57,9.66,8.97,10.41,9.19,9.59,9.18,9.52,
            9.68,9.01,8.6,9.85,9.22,8.99,9.69,9.09,9.34,9.62,8.6,8.19,9.02,
            7.79,8.03,8.79,9.42,7.78,7.58,8.69,7.65,7.44,8.47,7.91,8.72,7.79,
            7.61,7.75,7.33,6.91,7.11,7.69,6.73,7.26,6.8,6.89,6.26,6.6,7.11,
            6.46,6.5,6.1,5.81,6.21,6.56,6.86,5.97,6.73,5.62,5.88,5.5,5.8,
            6.12,5.42,5.22,5.97,5.85,5.49,5.08,4.99,5.67,4.85,4.74,4.57,4.88}
            ,
            {38.64,32.64,27.97,23.62,24.26,21.86,21.12,20.49,20.21,19.41,19.82,21.29,19.3,
            18.82,18.37,18.23,18.23,17.18,17.62,16.69,16.36,19.06,15.72,16.6,15.69,16.29,
            15.45,16.2,16.16,16.12,15.47,15.26,15.77,15.1,14.94,15.02,15.02,17.36,14.71,
            14.7,14.8,14.41,14.64,14.59,14.73,13.56,13.81,16.03,13.9,13.31,13.03,13.41,
            13.64,13.26,13.19,13.13,12.98,12.67,12.11,12.48,12.57,12.69,11.37,12.37,
            14.82,12.31,12.27,11.36,12.65,12.64,11.07,12.52,12.1,12.36,12.02,14.09,
            11.65,12.29,12.41,11.85,11.97,10.85,11.45,11.78,10.67,13.62,11.03,11.03,
            10.54,11.3,10.84,11.26,11.69,11.05,10.82,11.17,10.69,13.31,10.59,11.32,11.55,
            10.16,13.15,10.67,11.3,10.56,10.7,10.2,10.26,10.71,9.21,9.49,9.85,9.51,10.1,
            10.27,10.54,10.52,9.09,8.93,9.15,9.99,9.73,8.72,10.22,9.61,8.22,8.56,8.46,
            8.88,9.34,8.84,8.8,9.57,8.58,7.97,8.66,8.38,7.99,7.47,7.78,7.69,7.89,7.62,
            7.23,7.91,6.92,7.26,7.06,7.44,7.73,6.68,6.91,7.5,6.51,6.72,6.38,6.85,6.17,
            6.64,6.31,6.66,5.99,5.86,5.68,6.33,5.54,5.31,5.61}
            ,
            {43.45,37.17,32.22,28.14,26.39,24.55,23.74,23.09,24.79,23.05,21.92,22.34,21.76,
            21.23,21.01,20.7,20.5,20.31,19.51,22.08,19.38,18.6,18.84,17.73,18.73,17.83,
            18.06,18.32,18.37,17.38,18.27,18.22,17.11,19.97,17.49,16.93,16.88,17.08,17.09,
            17.01,16.68,16.4,16.65,16.54,16.56,18.25,15.43,15.69,15.38,15.05,15.53,15.11,
            15.16,14.42,15.32,15,14.87,14.81,14.71,14.59,14.5,14.52,13.43,14.46,14.19,
            13.56,16.73,13.9,13.03,14.15,14.15,13.66,12.73,13.63,15.74,13.26,13.83,13.5,
            13.72,12.58,13.76,13.46,12.96,13.76,12.47,12.92,12.99,13.18,12.65,12.87,12.63,
            12.54,12.19,12.77,14.98,12.7,12.28,12.57,12.84,12.59,12.8,12.07,14.41,11.39,
            11.05,11.8,11.89,12,12.41,11.25,11.5,14.06,11.6,10.96,10.69,10.96,11.39,11.78,
            11.44,11.69,10.4,11.23,11.53,10.23,9.92,10.94,10.16,10.78,10.34,10.29,11.19,
            9.59,9.87,9.58,9.89,10.42,9.95,10.64,9.06,9.93,9.32,9.33,9.23,9.09,8.74,8.39,
            8.65,8.49,8.95,8.09,8.89,8.62,8.27,7.85,8.49,7.95,7.65,7.45,7.8,7.21,7.7,
            7.38,7.55,7.02,6.8,6.61,7.18,6.29,6.56}
            ,
            {49.1,42.7,37.59,33.22,29.77,27.91,29.52,26.97,26.38,26.51,25.12,25.49,24.82,
            24.29,24.47,26.3,23.68,23.4,23.62,22.78,22.53,21.53,21.98,21.38,21.73,20.65,
            20.39,23.7,21.41,21.17,20.98,20.95,19.92,20.65,19.56,20.13,19.59,19.97,
            19.8,19.24,19.03,19.29,19.18,21.52,19.1,18.56,18.99,18.19,17.8,17.47,17.86,
            17.38,17.58,17.49,17.41,17.73,17.4,17.39,17.57,16.48,17.28,16.16,17.03,19.56,
            16.82,16.72,16.46,15.65,16.08,15.23,15.32,15.76,18.21,16.19,16.18,15.75,
            15.79,15.72,15.41,15.92,14.87,15.44,15.33,15.26,14.89,15.46,15.32,15.54,
            15.05,15.57,15.4,15.07,14.57,14.75,17.01,14.66,13.96,14.24,14.46,13.52,13.99,
            13.94,14.29,14.47,13.6,13.46,14.37,13.76,13.05,13.39,16.06,13.67,13.76,13.42,
            13.87,12.66,12.64,13.15,15.39,12.23,12.32,13.25,13.03,12.9,13.19,11.79,12.34,
            12.3,12.57,12.87,11.75,11.96,12.36,11.56,11.22,11.41,11.65,11.7,12.47,11.53,
            11.88,11.09,12.08,10.81,11.09,10.41,10.59,10.45,10.03,10.13,10.5,10.26,10.39,
            9.69,9.66,9.39,9.87,9.22,8.92,9.18,9.11,8.89,8.63,8.37,8.79,8.11,8.34,7.66,7.9}
            ,
            {55.78,49.53,44.43,39.94,35.96,34.08,32.27,30.72,31.12,30.95,32.26,29.41,29.6,
            28.98,28.8,28.33,27.58,27.87,27.28,27.2,26.66,29.15,25.58,25.83,26.21,25.63,
            24.57,25.48,24.08,24.83,24.94,24.61,24.55,23.49,24.14,23.33,26.44,23.86,23,
            23.53,22.87,22.55,22.67,22.88,22.57,22.59,21.68,22.33,21.69,21.9,21.18,
            20.55,23.95,21.28,19.99,20.98,21.05,20.63,21.03,20.71,20.7,20.8,20.7,20.16,
            19.34,20.13,19.66,19.21,19.74,19.6,18.78,22.1,19.16,19.03,18.64,18.28,
            18.91,18.83,18.82,18.71,18.83,19.06,19.06,18.45,18.71,18.86,18.29,17.58,
            17.95,18.16,18.16,20.31,17.01,17.76,17.43,17.54,17.77,17.44,16.96,17.01,
            16.88,17.1,16.4,17.13,16.78,16.93,16.6,16.04,16.73,15.88,16.88,18.8,15.5,
            16.55,16.2,16.28,16.02,15.4,15.67,14.93,15.97,15.23,15.2,14.83,14.73,15.31,
            17.59,14.93,15.49,15.32,14.31,14.43,15.21,14.92,14.26,14.63,13.95,13.76,
            14.28,14.8,13.78,13.87,13.3,13.38,13.27,13.99,14.16,14.3,12.84,12.83,12.89,
            12.69,12.36,12.53,12.18,11.92,11.82,11.92,11.43,11.39,11.15,11.01,11.07,
            10.69,10.35,10.64,9.72,9.93,10.1}
            ,
            {63.72,57.99,53.23,48.87,44.86,40.03,40.82,38.37,36.88,37.09,36.78,35.55,35.32,
            35.3,37.27,34.04,34.27,33.68,33.72,32.74,33.03,32.24,32.44,31.58,32.12,34.05,
            31.3,30.44,31.1,29.65,30.74,30.32,28.9,29.03,29.78,29.76,29.21,29.55,29.03,
            28.27,29.23,27.94,28.09,27.65,30.99,28.14,27.77,27.62,26.69,27.44,26.96,
            25.81,27.09,26.31,26.85,26.33,26.04,25.61,26.17,24.98,25.15,28.54,25.57,
            25.33,25,25.4,25.11,24.27,25.26,25.28,24.49,24.28,24.42,24.46,23.59,23.83,
            24,23.88,23.06,23.49,23.59,23.23,23.34,23.02,25.99,23.36,23.33,22.35,23.24,
            22.66,22.38,22.2,21.58,22.11,21.78,21.81,21.72,22.1,21.69,21.82,21.66,21.62,
            21.59,21.18,20.88,21.22,21.24,21.43,20.5,23.7,20.23,20.66,19.76,20.49,20.59,
            20.11,20.14,19.98,19.54,19.46,19.98,19.57,19.57,19.1,19.01,19.41,19.54,21.71,
            19.29,19.03,18.45,18.3,19.01,18.87,18.28,18.55,18.28,17.69,17.91,18.43,17.65,
            18.17,17.64,17.55,17.13,17.88,17.04,17.33,17.46,16.49,17.25,16.64,16.48,16.1,
            15.9,15.86,15.97,15.37,15.24,14.78,14.93,14.73,14.38,14.29,13.92,13.7,13.06,13.22,13.03}
            ,
            {73.28,68.62,64.66,60.87,57.24,53.28,49.18,47.81,49.6,46.51,46.61,45.28,45.54,
            45.14,44.26,46.11,43.74,43.07,42.61,42.42,42.68,42.79,41.44,41.51,41.41,40.2,
            40.47,40.45,39.08,40.14,42.64,39.57,38.67,39.79,38.15,38.95,38.28,38.2,38.54,
            37.38,37.89,36.94,37.17,36.61,37.34,37.48,37.24,39.65,35.7,36.75,35.94,35.3,
            35.14,34.7,35.72,35.8,34.89,35.08,34.27,33.84,34.56,34.71,34.45,33.77,33.5,
            33.56,34.07,32.98,33.57,33.42,36.36,32.8,32.75,32.46,32.98,32.48,31.96,31.59,
            32.38,32.25,31.76,31.2,31.37,30.63,31.05,30.8,31.13,30.81,30.44,29.77,29.98,
            30.36,29.98,30.09,33.22,30.19,30.06,29.14,29.49,29.27,28.94,28.99,29.01,28.8,
            28.2,28.56,28.53,28.38,28.55,28.45,28.49,27.7,27.38,27.67,27.09,27.51,27.15,
            30.27,26.93,26.56,26.72,26.7,26.2,26.73,26.59,26.74,26.59,26.46,26.17,25.38,
            25.81,25.2,25.47,24.78,24.86,24.54,24.72,24.6,24.81,24.91,25.02,24.96,24.79,
            24.3,23.72,23.76,24.04,22.95,22.77,22.87,23.34,22.94,23.13,22.7,23.19,22.19,
            22.57,21.92,21.42,21.08,21.01,20.91,20.76,20.2,20.01,19.26,18.98,19.06,18.45}
            ,
            {84.97,82.1,79.63,77.16,74.66,71.69,68.72,65.28,64.41,65.72,63.55,63.49,62.66,62.57,
            61.63,61.58,60.68,60.7,60.69,62.58,59.72,59.82,58.61,59.58,58.6,57.31,58.64,
            58.43,57.26,57.89,57.54,57.72,57.56,56.38,59.65,56.36,55.6,56.08,54.94,56.25,
            54.91,54.84,55.13,55.64,55.62,55.67,55.31,53.95,53.98,53.08,53.15,53.85,53.68,
            56.26,53.65,53.25,52.68,52.24,53.34,52.2,51.96,51.39,51.44,52.05,51.87,51.02,
            51.34,50.54,50.58,51.16,50.18,50.21,49.51,50.01,52.84,49.23,49.32,49.47,48.61,
            49.25,48.41,48.63,48.29,48.35,48.03,47.73,47.39,47.41,47.56,47.49,47.28,46.78,
            46.45,46.36,46.39,49.41,45.62,45.57,45.46,45.85,45.51,45.16,44.85,44.65,44.79,
            44.47,44.56,43.91,43.58,43.87,43.43,43.42,43.14,43.08,42.6,42.58,42.54,41.87,
            42.24,41.78,41.54,41.65,40.93,41.22,40.75,40.16,40.44,40.61,39.98,39.94,39.84,
            39.39,39.78,39.06,38.54,38.63,38.3,38.94,38.16,37.63,37.89,37.58,37.25,36.83,
            36.76,37.23,36.51,36.6,36.34,35.74,35.61,35.08,34.82,35.4,34.93,34.68,34.64,
            33.95,33.99,33.67,33.16,32.9,33.12,32.08,31.68,31.21,30.91,30.14,29.29}
    };
    public static int[][] imgs = {
            {R.mipmap.heitao_2,R.mipmap.heitao_3,R.mipmap.heitao_4,R.mipmap.heitao_5,R.mipmap.heitao_6,R.mipmap.heitao_7,
                    R.mipmap.heitao_8,R.mipmap.heitao_9,R.mipmap.heitao_10,R.mipmap.heitao_j,R.mipmap.heitao_q,R.mipmap.heitao_k,R.mipmap.heitao_a}
            ,
            {R.mipmap.hongxin_2,R.mipmap.hongxin_3,R.mipmap.hongxin_4,R.mipmap.hongxin_5,R.mipmap.hongxin_6,R.mipmap.hongxin_7,
                    R.mipmap.hongxin_8,R.mipmap.hongxin_9,R.mipmap.hongxin_10,R.mipmap.hongxin_j,R.mipmap.hongxin_q,R.mipmap.hongxin_k,R.mipmap.hongxin_a}
            ,
            {R.mipmap.meihua_2,R.mipmap.meihua_3,R.mipmap.meihua_4,R.mipmap.meihua_5,R.mipmap.meihua_6,R.mipmap.meihua_7,
                    R.mipmap.meihua_8,R.mipmap.meihua_9,R.mipmap.meihua_10,R.mipmap.meihua_j,R.mipmap.meihua_q,R.mipmap.meihua_k,R.mipmap.meihua_a}
            ,
            {R.mipmap.fangkuai_2,R.mipmap.fangkuai_3,R.mipmap.fangkuai_4,R.mipmap.fangkuai_5,R.mipmap.fangkuai_6,R.mipmap.fangkuai_7,
                    R.mipmap.fangkuai_8,R.mipmap.fangkuai_9,R.mipmap.fangkuai_10,R.mipmap.fangkuai_j,R.mipmap.fangkuai_q,R.mipmap.fangkuai_k,R.mipmap.fangkuai_a}
    };
    static String[] cardNames = {"2","3","4","5","6","7","8","9","T","J","Q","K","A"};
    public final static String[][] seatFlags= {{},{},
            {"BB","BTN"},
            {"SB","BB","BTN"},
            {"SB","BB","CO","BTN"},
            {"SB","BB","UTG","CO","BTN"},
            {"SB","BB","UTG","HJ","CO","BTN"},
            {"SB","BB","UTG","UTG+1","HJ","CO","BTN"},
            {"SB","BB","UTG","UTG+1","MP","HJ","CO","BTN"},
            {"SB","BB","UTG","UTG+1","MP","MP+1","HJ","CO","BTN"}};
    public static double getWinPercent(int[] cards,int poker1,int poker2,int playerCount){
        if(poker1==-1 || poker2==-1){
            return 0.0;
        }
        String pokerName = "";
        if(cards[0]==-1){
            int numType1 = (int) poker1 / 100;
            int numType2 = (int) poker2 / 100;
            int num1 = poker1 % 100;
            int num2 = poker2 % 100;
            if(num1 == 13){
                num1 = 8;
            }
            if(num2 == 13){
                num2 = 8;
            }
            if(num1==num2){
                pokerName =  cardNames[num1]+cardNames[num2];
            }
            if(numType1==numType2){
                if(num1<num2){
                    pokerName =  cardNames[num1]+cardNames[num2]+"s";
                }else{
                    pokerName = cardNames[num2]+cardNames[num1]+"s";
                }
            }else{
                if(num1<num2){
                    pokerName =  cardNames[num1]+cardNames[num2];
                }else{
                    pokerName =  cardNames[num2]+cardNames[num1];
                }
            }
            for (int i = 0; i < 169; i++) {
                if(playerCount>=1){
                    if(pokerName.equals(CardUtil.cards[8-playerCount][i])){
                        return Math.floor(winP[8-playerCount][i]*100)/100;//获取相对应的胜率
                    }
                }else{
                    break;
                }
            }
        }else{//翻牌
            int[] pokers = new int[]{(int)Math.floor(poker1/100)*13+poker1%100,(int)Math.floor(poker2/100)*13+poker2%100};
            int[] boards = {-1,-1,-1,-1,-1};
            for (int i = 0; i < 5; i++) {
                int card = cards[i];
                if(card!=-1){
                    boards[i] = (int)Math.floor(card/100)*13+card%100;
                }
            }
            float v = ScanTool.CalcProbablyWinRate(playerCount, pokers, boards);
            return Math.floor(v*10000)/100;
        }
        return 0.00;
    }
    public static String getCardText(int card){
        String str = "";
        if(card<0){
            return "?";
        }
        int secondCard = card%100 + 2;
        switch (secondCard){
            case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:
                str += secondCard;
                break;
            case 10: str += "T"; break;
            case 11: str += "J"; break;
            case 12: str += "Q"; break;
            case 13: str += "K"; break;
            case 14: str += "A"; break;
            default: break;
        }
        switch ((int)Math.floor(card/100)){
            case 0: str += "s-"; break;
            case 1: str += "h-"; break;
            case 2: str += "c-"; break;
            case 3: str += "d-"; break;
            default: break;
        }
        return str;
    }
    public static String getCardNumber(int card){
        String str = "";
        if(card<0){
            return str;
        }
        int secondCard = card%100 + 2;
        switch (secondCard){
            case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:
                str += secondCard;
                break;
            case 10: str += "T"; break;
            case 11: str += "J"; break;
            case 12: str += "Q"; break;
            case 13: str += "K"; break;
            case 14: str += "A"; break;
            default: break;
        }
        return str;
    }

    public static String getPokerName(int card1,int card2){
        if(card1==-1 || card2==-1){
            return "";
        }
        int numType1 = (int) card1 / 100;
        int numType2 = (int) card2 / 100;
        int num1 = card1 % 100;
        int num2 = card2 % 100;
        if(num1 == 13){
            num1 = 8;
        }
        if(num2 == 13){
            num2 = 8;
        }
        if(num1==num2){
            return cardNames[num1]+cardNames[num2];
        }
        if(numType1==numType2){
            if(num1>num2){
               return cardNames[num1]+cardNames[num2]+"s";
            }else{
                return cardNames[num2]+cardNames[num1]+"s";
            }
        }else{
            if(num1>num2){
                return cardNames[num1]+cardNames[num2]+"o";
            }else{
                return cardNames[num2]+cardNames[num1]+"o";
            }
        }
    }
    /**判断一手中自己处于什么位置*/
    public static String getSeatFlag(int totalCount,int count){
        if(totalCount<2 || count<0){
            return "";
        }
        return seatFlags[totalCount][count];
    }
}
